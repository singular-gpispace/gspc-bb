<defun name="buchberger">
	<include-structs href="structures.xpnet"/>

	<in name="base_filename" type="string" place="place_base_filename"/>
	<in name="library_name" type="string" place="place_library_name"/>
	<in name="redSB" type="long" place="place_redSB"/>
	<in name="input" type="string" place="place_input"/>
	<in name="nworkers" type="long" place="place_nworkers"/>
	<out name="output" type="string" place="place_output"/>
	<out name="runtime" type="map" place="place_runtime"/>
	<net>
		<place name="place_base_filename" type="string"/>
		<place name="place_library_name" type="string"/>
		<place name="place_redSB" type="long"/>
		<place name="place_input" type="string"/>
		<place name="place_output" type="string"/>
		<place name="place_BB_finished" type="control"/>
		<place name="place_r" type="int"/>
		<place name="place_M" type="list"/>
		<place name="place_nworkers" type="long"/>
		<place name="place_balNF" type="control"/>
		<!--place name="place_Mvec" type="bytearray"/-->
		<!--place name="place_bookkeeping" type="map"/-->
		<place name="place_Q" type="list"/>
		<place name="place_Qback" type="index_pair"/>
		<place name="place_started_indices" type="running_reduction"/>
		<place name="place_finished_indices" type="index_pair"/>
		<place name="place_NF" type="list"/>
		<place name="place_needed_indices" type="long"/>
		<place name="place_needed_indices_list" type="list"/>
		<place name="place_runtime" type="map"/>
		<place name="place_time_offset" type="long"/>
		<place name="place_blacklist" type="set"/>

		<transition name="init" priority="42">
			<defun>
				<require key="worker" mandatory="true"/>
       	<in name="base_filename" type="string"/>
				<in name="library_name" type="string"/>
				<in name="input" type="string"/>
				<in name="nworkers" type="long"/>
				<!--out name="bookkeeping" type="map"/-->
				<out name="Q" type="list"/>
				<out name="started_indices" type="list"/>
				<out name="Qback" type="index_pair"/>
				<out name="blacklist" type="set"/>
				<out name="r" type="int"/>
				<out name="M" type="list"/>
				<out name="runtime" type="map"/>
				<out name="time_offset" type="long"/>
				<out name="balNF" type="list"/>
				<module name="singular_buchberger"
							  require_function_unloads_without_rest="false"
							  function="function_init(started_indices, runtime, time_offset, base_filename, library_name, input, Q, Qback, r, M, nworkers, balNF, blacklist)">
				  <cinclude href="interface/buchberger_interface.hpp"/>
					<cinclude href="util-generic/dynamic_linking.hpp"/>
					<cinclude href="boost/variant.hpp"/>
					<cinclude href="iostream"/>
					<cinclude href="fstream"/>
					<cinclude href="chrono"/>
					<cinclude href="boost/thread/thread.hpp"/>

					<code><![CDATA[
						long runtime_start = std::chrono::duration_cast<std::chrono::milliseconds>(std::chrono::high_resolution_clock::now().time_since_epoch()).count();

						// all timings will be offset by this amount (necessary since SINGULAR integers only range from -2^31 to 2^31-1 and time since epoch is too big).
						// should NOT be LARGER than runtime_start (or timings won't display properly in SINGULAR)
						time_offset = runtime_start;

						runtime_start -= time_offset;
						std::string singular_function_name = "init";

						#ifdef DEBUG_BBA
						std::cout << "start time (= time since epoch in ms minus "<< time_offset <<"ms): " << runtime_start << std::endl;
						std::cout << runtime_start << ": entering " << singular_function_name << std::endl;
						#endif

						std::vector<std::vector<int>> Mvec = RESOLVE_INTERFACE_FUNCTION(singular_buchberger_get_M_and_init_F) (library_name, base_filename, input, time_offset, &runtime);

						r = Mvec.size();
						#ifdef DEBUG_BBA
						std::cout << runtime_start << ": r=" << r << std::endl;
						//print_variant(M);
						#endif


						long prodcrit_counter  = 0L;
						long chaincrit_counter = 0L;

						int j=1;
						for (std::vector<std::vector<int>>::iterator Mj=Mvec.begin(); j<=r; ++Mj, j++)
						{
							int i=1;
							for (std::vector<std::vector<int>>::iterator Mi=Mvec.begin(); i<j; ++Mi, i++)
							{
								bool add_to_Q = true;
								std::vector<int> lcm_i_j = lcm(*Mi, *Mj);
								if (test_PC(*Mi,*Mj)) // apply PC
									{add_to_Q = false; prodcrit_counter++;}
								else // apply CC
								{
									int k=1;
									for (std::vector<std::vector<int>>::iterator Mk=Mvec.begin(); k<=r; ++Mk, k++)
									{
										if(k!=i && k!=j)
										{
											if (test_CC(lcm_i_j, *Mi, *Mj, *Mk))
											{
												if(k<i)
													{add_to_Q = false; chaincrit_counter++; break;}
												else { if(k<j)
												{
													std::vector<int> lcm_k_j = lcm(*Mk, *Mj);
													if(!equal(lcm_k_j,lcm_i_j)) {add_to_Q = false; chaincrit_counter++; break;}
												}
												else // (k>j)
												{
													std::vector<int> lcm_i_k = lcm(*Mi, *Mk);
													std::vector<int> lcm_j_k = lcm(*Mj, *Mk);
													if(!equal(lcm_i_k,lcm_i_j) && !equal(lcm_j_k,lcm_i_j)) {add_to_Q = false; chaincrit_counter++; break;}
												} }
											}
										}
									}
								}

								if(add_to_Q)
								{
									GpiStruct si;
									si.emplace_back(std::pair<std::string,GpiVariant>({"i"    , i}));
									si.emplace_back(std::pair<std::string,GpiVariant>({"j"    , j}));
									si.emplace_back(std::pair<std::string,GpiVariant>({"old_r", (int) 0}));

									#ifdef DEBUG_BBA
									std::cout << runtime_start << ": init: adding ("<<i<<","<<j<<") to started_indices" << std::endl;
									#endif
									started_indices.push_back(si);                       // add (i,j) to started indices
									queue_insert(Q, i, j, deg(lcm_i_j), vec2list(lcm_i_j)); // add (i,j) and information about lcm(fi,fj) to the queue
								}
							}
						}

						// build M
						for(std::vector<std::vector<int>>::iterator Mveci=Mvec.begin(); Mveci!=Mvec.end(); ++Mveci)
						{
							M.emplace_back(vec2list(*Mveci));
						}

						Qback.i = boost::get<int>(           get_list(Q.back()).front() );
						Qback.j = boost::get<int>(*std::next(get_list(Q.back()).begin()));
						#ifdef DEBUG_BBA
						std::cout << runtime_start << ": ----------------------------- Q.size() after init: " << Q.size() << std::endl;
						std::cout << runtime_start << ": --------------- started_indices.size() after init: " << started_indices.size() << std::endl;
						#endif

						// init balNF to limit the number of workers dedicated to NF_of_spoly
						for(int ii=0; ii<nworkers; ii++)
						{
							balNF.emplace_back(CONTROL_TOKEN);
						}

						// init the blcklist
						blacklist = GpiSet({});

						std::ofstream outFile(base_filename+"SIZE_OF_GB.txt");
						outFile << r;
						outFile.close();

						#ifdef DEBUG_BBA
						std::cout << runtime_start << ": exiting " << singular_function_name << std::endl;
						#endif

						long runtime_stop = std::chrono::duration_cast<std::chrono::milliseconds>(std::chrono::high_resolution_clock::now().time_since_epoch()).count() - time_offset;
						runtime[(std::string) "PRODUCT CRITERION"] = GpiList({-1L, -1L, -1L,  prodcrit_counter});
						runtime[(std::string) "CHAIN CRITERION"] = GpiList({-1L, -1L, -1L, chaincrit_counter});
						runtime["TRANSITION "+singular_function_name+" TOTAL"] = GpiList({runtime_start, runtime_stop, runtime_stop-runtime_start, 1L});
					]]></code>
				</module>
			</defun>
			<connect-read port="base_filename" place="place_base_filename"/>
			<connect-read port="library_name" place="place_library_name"/>
			<connect-read port="nworkers" place="place_nworkers"/>
			<connect-in port="input" place="place_input"/>
			<!--connect-out port="bookkeeping" place="place_bookkeeping"/-->
			<connect-out port="Q" place="place_Q"/>
			<connect-out port="Qback" place="place_Qback"/>
			<connect-out port="blacklist" place="place_blacklist"/>
			<connect-out port="r" place="place_r"/>
			<connect-out port="M" place="place_M"/>
			<connect-out port="runtime" place="place_runtime"/>
			<connect-out port="time_offset" place="place_time_offset"/>
			<connect-out-many port="started_indices" place="place_started_indices"/>
			<connect-out-many port="balNF" place="place_balNF"/>
		</transition>



		<transition name="NF_of_spoly" priority="1">
			<defun>
				<require key="worker" mandatory="true"/>
				<in name="base_filename" type="string"/>
				<in name="library_name" type="string"/>
				<in name="blacklist" type="set"/>
				<in name="r" type="int"/>
				<in name="Qback" type="index_pair"/>
				<in name="started_indices" type="running_reduction"/>
				<in name="time_offset" type="long"/>
				<inout name="balNF" type="control"/>
				<out name="started_indices_out" type="list"/>
				<out name="finished_indices" type="list"/>
				<out name="NF" type="list"/>
				<out name="runtime" type="map"/>
				<module name="singular_buchberger"
							  require_function_unloads_without_rest="false"
							  function="function_NF_of_spoly(runtime, base_filename, library_name, r, Qback, started_indices, started_indices_out, finished_indices, NF, time_offset, balNF, blacklist)">
					<cinclude href="interface/buchberger_interface.hpp"/>
					<cinclude href="util-generic/dynamic_linking.hpp"/>
					<cinclude href="boost/variant.hpp"/>
					<cinclude href="iostream"/>
					<cinclude href="chrono"/>
					<cinclude href="fstream"/>
					<cinclude href="boost/archive/binary_iarchive.hpp"/>
					<cinclude href="boost/archive/binary_oarchive.hpp"/>
					<cinclude href="boost/thread/thread.hpp"/>

					<code><![CDATA[
						bool i_in_bl  = (blacklist.find((GpiVariant) started_indices.i)               !=blacklist.end());
						bool j_in_bl  = (blacklist.find((GpiVariant) started_indices.j)               !=blacklist.end());
						bool ij_in_bl = (blacklist.find(GpiSet({started_indices.i,started_indices.j}))!=blacklist.end());
						if ( ((i_in_bl || j_in_bl) && !ij_in_bl) || blacklist.find(GpiList({started_indices.i,started_indices.j}))!=blacklist.end() )
						{
							return;
						}
						if (i_in_bl && j_in_bl && ij_in_bl)
						{
							GpiStruct fi;
							fi.emplace_back(std::pair<std::string,GpiVariant>({"i"    , started_indices.i}));
							fi.emplace_back(std::pair<std::string,GpiVariant>({"j"    , started_indices.j}));

							finished_indices.push_back(fi);

							return;
						}
						long runtime_start = std::chrono::duration_cast<std::chrono::milliseconds>(std::chrono::high_resolution_clock::now().time_since_epoch()).count() - time_offset;

						GpiList si_out;
						GpiList fi_out;

						long read_poly_start = std::chrono::duration_cast<std::chrono::milliseconds>(std::chrono::high_resolution_clock::now().time_since_epoch()).count() - time_offset;

						//std::list<poly> generators;
						//READ_GENERATORS_STATICALLY(generators, r);

						static std::list<poly> generators;
						for (int k=generators.size()+1; k<=r; k++)
						{
							generators.emplace_back(RESOLVE_INTERFACE_FUNCTION(read_generator) (base_filename, k));
						}

						long read_poly_stop = std::chrono::duration_cast<std::chrono::milliseconds>(std::chrono::high_resolution_clock::now().time_since_epoch()).count() - time_offset;
						runtime[(std::string) "reading generators in NF_of_spoly (static)"] = GpiList({-1L, read_poly_stop, read_poly_stop-read_poly_start, 1L});

						std::string singular_function_name = "NF_of_spoly";
						bool delete_files = true;
						bool silent = true;
						RESOLVE_INTERFACE_FUNCTION(singular_buchberger_compute_NF) (library_name, singular_function_name, base_filename, generators, r, Qback.i, Qback.j, started_indices.i, started_indices.j, started_indices.old_r, time_offset, &runtime, &si_out, &fi_out, &NF, delete_files, silent);


						if(si_out.size()>0)
						{
							GpiStruct si;
							si.emplace_back(std::pair<std::string,GpiVariant>({"i"    , boost::get<int>(si_out.front())}));
							si.emplace_back(std::pair<std::string,GpiVariant>({"j"    , boost::get<int>(si_out.back())}));
							si.emplace_back(std::pair<std::string,GpiVariant>({"old_r", r}));

							started_indices_out.push_back(si);

							#ifdef DEBUG_BBA
							std::cout << runtime_start << ": 1 NF_of_spoly: adding ("<<boost::get<int>(si_out.front())<<","<<boost::get<int>(si_out.back())<<") to started_indices (old_r="<<started_indices.old_r<<", r="<<r<<")" << std::endl;
							#endif
						}
						if(fi_out.size()>0)
						{
							GpiStruct fi;
							fi.emplace_back(std::pair<std::string,GpiVariant>({"i"    , boost::get<int>(fi_out.front())}));
							fi.emplace_back(std::pair<std::string,GpiVariant>({"j"    , boost::get<int>(fi_out.back())}));

							finished_indices.push_back(fi);

							#ifdef DEBUG_BBA
							std::cout << runtime_start << ": 2 NF_of_spoly: adding ("<<boost::get<int>(fi_out.front())<<","<<boost::get<int>(fi_out.back())<<") to finished_indices (old_r="<<started_indices.old_r<<", r="<<r<<")" << std::endl;
							#endif
						}
						if(NF.size()>0)
						{
							#ifdef DEBUG_BBA
							std::cout << runtime_start << ": 3 NF_of_spoly: adding ("<<boost::get<int>(get_list(NF.front()).front())<<","<<boost::get<int>(*std::next(get_list(NF.front()).begin()))<<") to NF (old_r="<<started_indices.old_r<<", r="<<r<<")" << std::endl;
							#endif
						}
						long runtime_stop = std::chrono::duration_cast<std::chrono::milliseconds>(std::chrono::high_resolution_clock::now().time_since_epoch()).count() - time_offset;
						runtime["TRANSITION "+singular_function_name+" TOTAL"] = GpiList({runtime_start, runtime_stop, runtime_stop-runtime_start, 1L});
						if(NF.size()>0) {runtime[(std::string) "min serial runtime"] = GpiList({-1L, runtime_stop, runtime_stop-runtime_start, 1L});}
					]]></code>
				</module>
			</defun>
			<condition>
				(${r} :gt: ${started_indices.old_r})
			</condition>
			<connect-read port="base_filename" place="place_base_filename"/>
			<connect-read port="library_name" place="place_library_name"/>
			<connect-read port="blacklist" place="place_blacklist"/>
			<connect-read port="r" place="place_r"/>
			<connect-read port="Qback" place="place_Qback"/>
			<connect-read port="time_offset" place="place_time_offset"/>
			<connect-in port="started_indices" place="place_started_indices"/>
			<connect-inout port="balNF" place="place_balNF"/>
			<connect-out-many port="started_indices_out" place="place_started_indices"/>
			<connect-out-many port="finished_indices" place="place_finished_indices"/>
			<connect-out-many port="NF" place="place_NF"/>
			<connect-out port="runtime" place="place_runtime"/>
		</transition>



	  <transition name="NF_of_spoly_Qback" priority="2">
			<defun>
				<require key="worker" mandatory="true"/>
				<in name="base_filename" type="string"/>
				<in name="library_name" type="string"/>
				<in name="blacklist" type="set"/>
				<in name="r" type="int"/>
				<in name="Qback" type="index_pair"/>
				<in name="started_indices" type="running_reduction"/>
				<in name="time_offset" type="long"/>
				<out name="started_indices_out" type="list"/>
				<out name="finished_indices" type="list"/>
				<out name="NF" type="list"/>
				<out name="runtime" type="map"/>
				<module name="singular_buchberger"
							  require_function_unloads_without_rest="false"
							  function="function_NF_of_spoly_Qback(runtime, base_filename, library_name, r, Qback, started_indices, started_indices_out, finished_indices, NF, time_offset, blacklist)">
					<cinclude href="interface/buchberger_interface.hpp"/>
					<cinclude href="util-generic/dynamic_linking.hpp"/>
					<cinclude href="boost/variant.hpp"/>
					<cinclude href="iostream"/>
					<cinclude href="chrono"/>
					<cinclude href="fstream"/>
					<cinclude href="boost/archive/binary_iarchive.hpp"/>
					<cinclude href="boost/archive/binary_oarchive.hpp"/>
					<cinclude href="boost/thread/thread.hpp"/>

					<code><![CDATA[
						bool i_in_bl  = (blacklist.find((GpiVariant) started_indices.i)               !=blacklist.end());
						bool j_in_bl  = (blacklist.find((GpiVariant) started_indices.j)               !=blacklist.end());
						bool ij_in_bl = (blacklist.find(GpiSet({started_indices.i,started_indices.j}))!=blacklist.end());
						if ( ((i_in_bl || j_in_bl) && !ij_in_bl) || blacklist.find(GpiList({started_indices.i,started_indices.j}))!=blacklist.end() )
						{
							return;
						}
						if (i_in_bl && j_in_bl && ij_in_bl)
						{
							GpiStruct fi;
							fi.emplace_back(std::pair<std::string,GpiVariant>({"i"    , started_indices.i}));
							fi.emplace_back(std::pair<std::string,GpiVariant>({"j"    , started_indices.j}));

							finished_indices.push_back(fi);

							return;
						}
						long runtime_start = std::chrono::duration_cast<std::chrono::milliseconds>(std::chrono::high_resolution_clock::now().time_since_epoch()).count() - time_offset;

						GpiList si_out;
						GpiList fi_out;

						long read_poly_start = std::chrono::duration_cast<std::chrono::milliseconds>(std::chrono::high_resolution_clock::now().time_since_epoch()).count() - time_offset;

						//std::list<poly> generators;
						//READ_GENERATORS_STATICALLY(generators, r);

						static std::list<poly> generators;
						for (int k=generators.size()+1; k<=r; k++)
						{
							generators.emplace_back(RESOLVE_INTERFACE_FUNCTION(read_generator) (base_filename, k));
						}

						long read_poly_stop = std::chrono::duration_cast<std::chrono::milliseconds>(std::chrono::high_resolution_clock::now().time_since_epoch()).count() - time_offset;
						runtime[(std::string) "reading generators in NF_of_spoly (static)"] = GpiList({-1L, read_poly_stop, read_poly_stop-read_poly_start, 1L});

						std::string singular_function_name = "NF_of_spoly_Qback";
						bool delete_files = true;
						bool silent = true;
						RESOLVE_INTERFACE_FUNCTION(singular_buchberger_compute_NF) (library_name, singular_function_name, base_filename, generators, r, Qback.i, Qback.j, started_indices.i, started_indices.j, started_indices.old_r, time_offset, &runtime, &si_out, &fi_out, &NF, delete_files, silent);


						if(si_out.size()>0)
						{
							GpiStruct si;
							si.emplace_back(std::pair<std::string,GpiVariant>({"i"    , boost::get<int>(si_out.front())}));
							si.emplace_back(std::pair<std::string,GpiVariant>({"j"    , boost::get<int>(si_out.back())}));
							si.emplace_back(std::pair<std::string,GpiVariant>({"old_r", r}));

							started_indices_out.push_back(si);

							#ifdef DEBUG_BBA
							std::cout << runtime_start << ": 1 NF_of_spoly_Qback: adding ("<<boost::get<int>(si_out.front())<<","<<boost::get<int>(si_out.back())<<") to started_indices (old_r="<<started_indices.old_r<<", r="<<r<<")" << std::endl;
							#endif
						}
						if(fi_out.size()>0)
						{
							GpiStruct fi;
							fi.emplace_back(std::pair<std::string,GpiVariant>({"i"    , boost::get<int>(fi_out.front())}));
							fi.emplace_back(std::pair<std::string,GpiVariant>({"j"    , boost::get<int>(fi_out.back())}));

							finished_indices.push_back(fi);

							#ifdef DEBUG_BBA
							std::cout << runtime_start << ": 2 NF_of_spoly_Qback: adding ("<<boost::get<int>(fi_out.front())<<","<<boost::get<int>(fi_out.back())<<") to finished_indices (old_r="<<started_indices.old_r<<", r="<<r<<")" << std::endl;
							#endif
						}
						if(NF.size()>0)
						{
							#ifdef DEBUG_BBA
							std::cout << runtime_start << ": 3 NF_of_spoly_Qback: adding ("<<boost::get<int>(get_list(NF.front()).front())<<","<<boost::get<int>(*std::next(get_list(NF.front()).begin()))<<") to NF (old_r="<<started_indices.old_r<<", r="<<r<<")" << std::endl;
							#endif
						}
						long runtime_stop = std::chrono::duration_cast<std::chrono::milliseconds>(std::chrono::high_resolution_clock::now().time_since_epoch()).count() - time_offset;
						runtime["TRANSITION "+singular_function_name+" TOTAL"] = GpiList({runtime_start, runtime_stop, runtime_stop-runtime_start, 1L});
						if(NF.size()>0) {runtime[(std::string) "min serial runtime"] = GpiList({-1L, runtime_stop, runtime_stop-runtime_start, 1L});}
					]]></code>
				</module>
			</defun>
			<condition>
				((${started_indices.i} :eq: ${Qback.i}) :and: (${started_indices.j} :eq: ${Qback.j}))
			</condition>
			<connect-read port="base_filename" place="place_base_filename"/>
			<connect-read port="library_name" place="place_library_name"/>
			<connect-read port="blacklist" place="place_blacklist"/>
			<connect-read port="r" place="place_r"/>
			<connect-read port="Qback" place="place_Qback"/>
			<connect-read port="time_offset" place="place_time_offset"/>
			<connect-in port="started_indices" place="place_started_indices"/>
			<connect-out-many port="started_indices_out" place="place_started_indices"/>
			<connect-out-many port="finished_indices" place="place_finished_indices"/>
			<connect-out-many port="NF" place="place_NF"/>
			<connect-out port="runtime" place="place_runtime"/>
		</transition>



		<transition name="increment" priority="43">
			<defun>
				<require key="worker" mandatory="true"/>
				<in name="base_filename" type="string"/>
				<in name="library_name" type="string"/>
				<in name="NF" type="list"/>
				<in name="time_offset" type="long"/>
				<!--inout name="bookkeeping" type="map"/-->
				<inout name="Q" type="list"/>
				<inout name="Qback" type="index_pair"/>
				<inout name="blacklist" type="set"/>
				<inout name="r" type="int"/>
				<inout name="M" type="list"/>
				<out name="started_indices" type="list"/>
				<out name="runtime" type="map"/>
				<out name="BB_finished" type="list"/>
				<module name="singular_buchberger"
							  require_function_unloads_without_rest="false"
							  function="function_increment(runtime, base_filename, library_name, NF, Q, Qback, r, M, started_indices, BB_finished, time_offset, blacklist)">
				  <cinclude href="interface/buchberger_interface.hpp"/>
					<cinclude href="util-generic/dynamic_linking.hpp"/>
					<cinclude href="boost/variant.hpp"/>
					<cinclude href="iostream"/>
					<cinclude href="fstream"/>
					<cinclude href="chrono"/>
					<cinclude href="boost/thread/thread.hpp"/>

					<code><![CDATA[
						long runtime_start = std::chrono::duration_cast<std::chrono::milliseconds>(std::chrono::high_resolution_clock::now().time_since_epoch()).count() - time_offset;
						std::string singular_function_name = "increment";

						GpiList::const_iterator it = NF.begin();
						int index_i = boost::get<int>(*it); ++it;
					  int index_j = boost::get<int>(*it); ++it;
						GpiVariant m = *it;

						long prodcrit_counter  = 0L;
						long chaincrit_counter = 0L;
						long cancelled_element_counter = 0L;
						long cancelled_s_pair_counter  = 0L;


						bool i_in_bl  = (blacklist.find((GpiVariant) index_i)     !=blacklist.end());
						bool j_in_bl  = (blacklist.find((GpiVariant) index_j)     !=blacklist.end());
						bool ij_in_bl = (blacklist.find(GpiSet({index_i,index_j}))!=blacklist.end());
						if (!(((i_in_bl || j_in_bl) && !ij_in_bl) || (i_in_bl && j_in_bl)))
						{
							r++;

							#ifdef DEBUG_BBA
							std::cout << runtime_start << ": increasing r from " << r-1 << " to " << r << " due to spoly (" << index_i << "," << index_j << ")"<< std::endl;
							#endif

							M.push_back(m);

							std::vector<std::vector<int>> Mvec;
							for(GpiList::iterator Mi=M.begin(); Mi!=M.end(); ++Mi)
							{
								Mvec.emplace_back(list2vec(*Mi));
							}


							std::vector<int> Mr = Mvec.back();
							int i=1;
							for (std::vector<std::vector<int>>::iterator Mi=Mvec.begin(); i<r; ++Mi, i++)
							{
								bool add_to_Q = true;
								std::vector<int> lcm_i_r;

								if (blacklist.find((GpiVariant) i) != blacklist.end())
								{
									add_to_Q = false;
								}
								else
								{
									lcm_i_r = lcm(*Mi, Mr);
									if (test_PC(*Mi,Mr)) // apply PC
									{add_to_Q = false; prodcrit_counter++;}
									else // apply CC
									{
										int k=1;
										for (std::vector<std::vector<int>>::iterator Mk=Mvec.begin(); k<=r; ++Mk, k++)
										{
											if(k!=i && k!=r)
											{
												if (test_CC(lcm_i_r, *Mi, Mr, *Mk))
												{
													if(k<i)
													{add_to_Q = false; chaincrit_counter++; break;}
													else // thus i<k<r  (k>r is not possible)
													{
														std::vector<int> lcm_k_r = lcm(*Mk, Mr);
														if(!equal(lcm_k_r,lcm_i_r)) {add_to_Q = false; chaincrit_counter++; break;}
													}
												}
											}
										}
									}
								}

								if (divides_monom(Mr,*Mi) &&  (blacklist.find((GpiVariant) i)==blacklist.end()))
								{
									// new found lead monomial divides i-th lead monomial ==> put i in blacklist
									// (and Set(i,r) as the (i,r)-th spoly has to be reduced, it is not eliminated through CC!)
									blacklist.emplace(i);
									blacklist.emplace(GpiSet({i,r}));
									// remove (i,j) for all j from Q:
									queue_delete_i(Q, i);
									cancelled_element_counter++;
								}

								if(add_to_Q)
								{
									GpiStruct si;
									si.emplace_back(std::pair<std::string,GpiVariant>({"i"    , i}));
									si.emplace_back(std::pair<std::string,GpiVariant>({"j"    , r}));
									si.emplace_back(std::pair<std::string,GpiVariant>({"old_r", (int) 0}));

									#ifdef DEBUG_BBA
									std::cout << runtime_start << ": increment: adding ("<<i<<","<<r<<") to started_indices" << std::endl;
									#endif
									started_indices.push_back(si);                          // add (i,r) to started indices
									queue_insert(Q, i, r, deg(lcm_i_r), vec2list(lcm_i_r)); // add (i,r) and information about lcm(fi,fr) to the queue
								}
							}

							for (GpiList::iterator Qk=Q.begin(); Qk!=Q.end(); )
							{
								int ii = boost::get<int>(get_list(*Qk).front());
								int jj = boost::get<int>(*std::next(get_list(*Qk).begin()));

								std::vector<int> lcm_i_j = lcm(Mvec[ii-1],Mvec[jj-1]);

								if(test_CC(lcm_i_j, Mvec[ii-1], Mvec[jj-1], Mvec[r-1]))
								{
									std::vector<int> lcm_i_r = lcm(Mvec[ii-1], Mvec[r-1]);
									std::vector<int> lcm_j_r = lcm(Mvec[jj-1], Mvec[r-1]);
									if(!equal(lcm_i_r,lcm_i_j) && !equal(lcm_j_r,lcm_i_j))
									{
										blacklist.emplace(GpiList({ii,jj}));
										Qk = Q.erase(Qk);
										chaincrit_counter++;
										cancelled_s_pair_counter++;
									}
									else {++Qk;}
								}
								else {++Qk;}
							}
						}

						queue_delete_i_j(Q, index_i, index_j);


						#ifdef DEBUG_BBA
						std::cout << runtime_start << ": increment: set size of Q(ueue) to " << Q.size() <<std::endl;
						#endif

						std::cout << "s(" << Q.size() << ")" << std::endl;

						std::ofstream outFile(base_filename+"SIZE_OF_Q.txt");
						outFile << (Q.size());
						outFile.close();

						std::ofstream outFileGB(base_filename+"SIZE_OF_GB.txt");
						outFileGB << r;
						outFileGB.close();

						if(Q.size()>0)
						{
							Qback.i = boost::get<int>(           get_list(Q.back()).front() );
							Qback.j = boost::get<int>(*std::next(get_list(Q.back()).begin()));
							#ifdef DEBUG_BBA
							std::cout << runtime_start << ": current Qback:  " << Qback.i << "," << Qback.j << std::endl;
							#endif
						}
						else // queue empty
						{
							std::cout << runtime_start << ": ########################################## Buchberger Algorithm finished (in 'increment'!) ##########################################" << std::endl;
							BB_finished.emplace_back(CONTROL_TOKEN);
						}


						long runtime_stop = std::chrono::duration_cast<std::chrono::milliseconds>(std::chrono::high_resolution_clock::now().time_since_epoch()).count() - time_offset;
						runtime[(std::string) "PRODUCT CRITERION"] = GpiList({-1L, -1L, -1L,  prodcrit_counter});
						runtime[(std::string) "CHAIN CRITERION"] = GpiList({-1L, -1L, -1L, chaincrit_counter});
						runtime[(std::string) "CANCELLED ELEMENTS"] = GpiList({-1L, -1L, -1L,  cancelled_element_counter});
						runtime[(std::string) "CANCELLED S-PAIRS"] = GpiList({-1L, -1L, -1L,  cancelled_s_pair_counter});
						runtime["TRANSITION "+singular_function_name+" TOTAL"] = GpiList({runtime_start, runtime_stop, runtime_stop-runtime_start, 1L});
					]]></code>
				</module>
			</defun>
			<connect-read port="base_filename" place="place_base_filename"/>
			<connect-read port="library_name" place="place_library_name"/>
			<connect-read port="time_offset" place="place_time_offset"/>
			<connect-in port="NF" place="place_NF"/>
			<!--connect-inout port="bookkeeping" place="place_bookkeeping"/-->
			<connect-inout port="Q" place="place_Q"/>
			<connect-inout port="Qback" place="place_Qback"/>
			<connect-inout port="blacklist" place="place_blacklist"/>
			<connect-inout port="r" place="place_r"/>
			<connect-inout port="M" place="place_M"/>
			<connect-out port="runtime" place="place_runtime"/>
			<connect-out-many port="started_indices" place="place_started_indices"/>
			<connect-out-many port="BB_finished" place="place_BB_finished"/>
		</transition>



		<transition name="remove_from_Q" priority="42">
			<defun>
				<require key="worker" mandatory="true"/>
				<in name="base_filename" type="string"/>
				<in name="library_name" type="string"/>
				<in name="M" type="list"/>
				<in name="finished_indices" type="index_pair"/>
				<in name="time_offset" type="long"/>
				<inout name="Q" type="list"/>
				<inout name="Qback" type="index_pair"/>
				<out name="runtime" type="map"/>
				<out name="BB_finished" type="list"/>
				<module name="singular_buchberger"
							  require_function_unloads_without_rest="false"
							  function="function_remove_from_Q(runtime, base_filename, library_name, M, finished_indices, Q, Qback, BB_finished, time_offset)">
				  <cinclude href="interface/buchberger_interface.hpp"/>
					<cinclude href="util-generic/dynamic_linking.hpp"/>
					<cinclude href="boost/variant.hpp"/>
					<cinclude href="iostream"/>
					<cinclude href="fstream"/>
					<cinclude href="chrono"/>
					<cinclude href="boost/thread/thread.hpp"/>

					<code><![CDATA[
						long runtime_start = std::chrono::duration_cast<std::chrono::milliseconds>(std::chrono::high_resolution_clock::now().time_since_epoch()).count() - time_offset;
						std::string singular_function_name = "remove_from_Q";

/*
						GpiList::const_iterator it = finished_indices.begin();
						int i = boost::get<int>(*it); ++it;
						int j = boost::get<int>(*it);
						*/
						//int new_state = (int) boost::get<long>(*it);

           	//get_list(bookkeeping[GpiSet({i,j})]).front() = new_state;

						//update_queue(Q, bookkeeping, Qback);

						queue_delete_i_j(Q, finished_indices.i, finished_indices.j);

						#ifdef DEBUG_BBA
						std::cout << runtime_start << ": remove_from_Q: removed element (" << finished_indices.i << "," << finished_indices.j << ") from Q(ueue) as it reduced to 0, size of Q: " << Q.size() <<std::endl;
						#endif
						int Q_size = Q.size();
						if (Q_size%100==0 || (Q_size<100 && Q_size%10==0))
						{
							std::cout << "(" << Q_size << ")" << std::endl;

						}

						std::ofstream outFile(base_filename+"SIZE_OF_Q.txt");
		        outFile << (Q.size());
		        outFile.close();

		        std::cout << "Integer written to file." << std::endl;
						if(Q.size()>0)
						{
							Qback.i = boost::get<int>(           get_list(Q.back()).front() );
					    Qback.j = boost::get<int>(*std::next(get_list(Q.back()).begin()));
							#ifdef DEBUG_BBA
							std::cout << runtime_start << ": current Qback:  " << Qback.i << "," << Qback.j << std::endl;
							#endif
						}
						else // queue empty
						{
							std::cout << runtime_start << ": ########################################## Buchberger Algorithm finished ##########################################" << std::endl;
							BB_finished.emplace_back(CONTROL_TOKEN);
						}


						long runtime_stop = std::chrono::duration_cast<std::chrono::milliseconds>(std::chrono::high_resolution_clock::now().time_since_epoch()).count() - time_offset;
						runtime["TRANSITION "+singular_function_name+" TOTAL"] = GpiList({runtime_start, runtime_stop, runtime_stop-runtime_start, 1L});
					]]></code>
				</module>
			</defun>
			<connect-read port="base_filename" place="place_base_filename"/>
			<connect-read port="library_name" place="place_library_name"/>
			<connect-read port="M" place="place_M"/>
			<connect-read port="time_offset" place="place_time_offset"/>
			<connect-in port="finished_indices" place="place_finished_indices"/>
			<connect-inout port="Q" place="place_Q"/>
			<connect-inout port="Qback" place="place_Qback"/>
			<connect-out port="runtime" place="place_runtime"/>
			<connect-out-many port="BB_finished" place="place_BB_finished"/>
		</transition>


		<transition name="minimize_GB" priority="42">
			<defun>
				<require key="worker" mandatory="true"/>
				<in name="base_filename" type="string"/>
				<in name="library_name" type="string"/>
				<in name="BB_finished" type="control"/>
				<in name="r" type="int"/>
				<in name="M" type="list"/>
				<in name="Q" type="list"/>
				<in name="time_offset" type="long"/>
				<!--inout name="bookkeeping" type="map"/-->
				<out name="needed_indices_list" type="list"/>
				<out name="needed_indices" type="list"/>
				<out name="output" type="string"/>
				<out name="runtime" type="map"/>
				<module name="singular_buchberger"
							  require_function_unloads_without_rest="false"
							  function="function_minimize_GB(runtime, base_filename, library_name, r, M, needed_indices_list, needed_indices, output, time_offset)">
				  <cinclude href="interface/buchberger_interface.hpp"/>
					<cinclude href="util-generic/dynamic_linking.hpp"/>
					<cinclude href="boost/variant.hpp"/>
					<cinclude href="iostream"/>
					<cinclude href="chrono"/>
					<cinclude href="boost/thread/thread.hpp"/>

					<code><![CDATA[
						long runtime_start = std::chrono::duration_cast<std::chrono::milliseconds>(std::chrono::high_resolution_clock::now().time_since_epoch()).count() - time_offset;

						#ifdef DEBUG_BBA
						std::cout << runtime_start << ": minimizing Gröbner basis with initially " << r << " elements" << std::endl;
						#endif

						std::vector<std::vector<int>> Mvec;
						for (GpiList::const_iterator Mj=M.begin(); Mj!=M.end(); ++Mj)
						{
							std::vector<int> Mjvec = list2vec(get_list(*Mj));
							Mvec.emplace_back(Mjvec);
						}

						bool needed;
						for(int i=0; i<r; i++)
						{
							needed = true;
							for(int j=0; j<r; j++) {
								if(j!=i) {
								if(divides_monom(Mvec[j],Mvec[i])) {
									if(i<j || !(equal(Mvec[i],Mvec[j]))) {
										needed = false; break;
								}}}
							}
							if(needed)
							{
								needed_indices_list.emplace_back((long) (i+1));
								needed_indices.emplace_back((long) (i+1));
							}
						}
						int final_r = size(needed_indices);

/*
						list lexp;
						if(M[1][2]==0) { // ideals
							ideal L;
							for(i=1; i<=final_r; i++) {
								lexp = M[indices[i]][1];
								L[i] = monomial(intvec(lexp[1..size(lexp)]));
							}
						}
						else { // modules
							module L;
							for(i=1; i<=final_r; i++) {
								lexp = M[indices[i]][1];
								L[i] = monomial(intvec(lexp[1..size(lexp)])) * gen(M[indices[i]][2]);
							}
						}

						GpiList M_SINGULAR;
						for (GpiList::const_iterator it=M.begin(); it!=M.end(); ++it)
						{
							GpiList entry = get_list(*it);
							GpiList new_entry;
							int i=1;
							GpiList::iterator it2=entry.begin();
							for (; it2!=entry.end(); ++it2)
							{
								if (i<entry.size()) {new_entry.emplace_back((long) boost::get<int>(*it2));}
								else {break;}
								i++;
							}
						  M_SINGULAR.emplace_back(GpiList({new_entry, (long) boost::get<int>(*it2)}));
						}
						*/

						std::vector<boost::variant<long,std::string,GpiList>>  args_read, args_in;  std::vector<boost::variant<long*,std::string*,GpiList*>>  args_inout, out;  std::vector<GpiList*>  out_many;
						std::string singular_function_name = "minimize_GB";
						args_read  = {base_filename};
						args_in    = {(long) r,(long) final_r, needed_indices_list};
						args_inout = {};
						out        = {&output};
						out_many   = {};
						bool delete_files = true;
						bool silent = true;
						RESOLVE_INTERFACE_FUNCTION(singular_buchberger_compute) (library_name, singular_function_name, base_filename, args_read, args_in, args_inout, out, out_many, delete_files, silent);

						#ifdef DEBUG_BBA
						std::cout << runtime_start << ": " << needed_indices.size() << " elements left" << std::endl;
						#endif



						long runtime_stop = std::chrono::duration_cast<std::chrono::milliseconds>(std::chrono::high_resolution_clock::now().time_since_epoch()).count() - time_offset;
						runtime["TRANSITION "+singular_function_name+" TOTAL"] = GpiList({runtime_start, runtime_stop, runtime_stop-runtime_start, 1L});
					]]></code>
				</module>
			</defun>
			<connect-read port="base_filename" place="place_base_filename"/>
			<connect-read port="library_name" place="place_library_name"/>
			<connect-read port="BB_finished" place="place_BB_finished"/>
			<connect-read port="time_offset" place="place_time_offset"/>
			<connect-in port="r" place="place_r"/>
			<connect-in port="M" place="place_M"/>
			<connect-in port="Q" place="place_Q"/>
			<!--connect-inout port="bookkeeping" place="place_bookkeeping"/-->
			<connect-out port="needed_indices_list" place="place_needed_indices_list"/>
			<connect-out port="output" place="place_output"/>
			<connect-out-many port="needed_indices" place="place_needed_indices"/>
			<connect-out port="runtime" place="place_runtime"/>
		</transition>


		<transition name="reduce_GB" priority="42">
			<defun>
				<require key="worker" mandatory="true"/>
				<in name="base_filename" type="string"/>
				<in name="library_name" type="string"/>
				<in name="redSB" type="long"/>
				<in name="needed_indices_list" type="list"/>
				<in name="needed_indices" type="long"/>
				<in name="time_offset" type="long"/>
				<out name="runtime" type="map"/>
				<module name="singular_buchberger"
								require_function_unloads_without_rest="false"
								function="function_reduce_GB(runtime, base_filename, library_name, redSB, needed_indices_list, needed_indices, time_offset)">
					<cinclude href="interface/buchberger_interface.hpp"/>
					<cinclude href="util-generic/dynamic_linking.hpp"/>
					<cinclude href="boost/variant.hpp"/>
					<cinclude href="iostream"/>
					<cinclude href="chrono"/>
					<cinclude href="boost/thread/thread.hpp"/>
					<code><![CDATA[
						long runtime_start = std::chrono::duration_cast<std::chrono::milliseconds>(std::chrono::high_resolution_clock::now().time_since_epoch()).count() - time_offset;

						int final_r = needed_indices_list.size();
						std::vector<int> needed_indices_vec = list2vec_long(needed_indices_list);

						static std::list<poly> generators;
						if (redSB) // if no reduced GB os required, we don't need the generators
						{
							long read_poly_start = std::chrono::duration_cast<std::chrono::milliseconds>(std::chrono::high_resolution_clock::now().time_since_epoch()).count() - time_offset;

							//READ_GENERATORS_STATICALLY_WITH_PERMUTATION(generators, final_r, needed_indices_vec);

							for (int k=generators.size()+1; k<=final_r; k++)
							{
								generators.emplace_back(RESOLVE_INTERFACE_FUNCTION(read_generator) (base_filename, needed_indices_vec[k-1]));
							}

							long read_poly_stop = std::chrono::duration_cast<std::chrono::milliseconds>(std::chrono::high_resolution_clock::now().time_since_epoch()).count() - time_offset;
							runtime[(std::string) "reading generators in reduce_GB (static)"] = GpiList({-1L, read_poly_stop, read_poly_stop-read_poly_start, 1L});
						}
						int current_index = (int) std::distance( needed_indices_vec.begin(), std::find(needed_indices_vec.begin(), needed_indices_vec.end(), needed_indices) ); // GET_INDEX(needed_indices_vec, needed_indices); // index in generators that has to be reduced w.r.t. the other generators

						#ifdef DEBUG_BBA
						std::cout << runtime_start << ": reduce_GB: processing " << current_index+1 << "-th element of the Gröbner basis" << std::endl;
						#endif
						std::string singular_function_name = "reduce_GB";
						RESOLVE_INTERFACE_FUNCTION(singular_buchberger_reduce_GB) (base_filename, library_name, generators, needed_indices, current_index, final_r, redSB, time_offset, &runtime);

						long runtime_stop = std::chrono::duration_cast<std::chrono::milliseconds>(std::chrono::high_resolution_clock::now().time_since_epoch()).count() - time_offset;
						runtime["TRANSITION "+singular_function_name+" TOTAL"] = GpiList({runtime_start, runtime_stop, runtime_stop-runtime_start, 1L});
					]]></code>
				</module>
			</defun>
			<connect-read port="base_filename" place="place_base_filename"/>
			<connect-read port="library_name" place="place_library_name"/>
			<connect-read port="redSB" place="place_redSB"/>
			<connect-read port="needed_indices_list" place="place_needed_indices_list"/>
			<connect-read port="time_offset" place="place_time_offset"/>
			<connect-in port="needed_indices" place="place_needed_indices"/>
			<connect-out port="runtime" place="place_runtime"/>
		</transition>
	</net>
</defun>
