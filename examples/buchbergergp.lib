///////////////////////////////////////
version="version buchbergergp.lib 0.1 Mar 2025 ";
category="Commutative algebra";
info="
LIBRARY: buchbergergp.lib  procedures for Buchbergers algorithm

OVERVIEW:
    This library contains SINGULAR procedures used in the parallel implementation
    of Buchbergers algorithm in the Singular/GPI-Space framework.
    The newstruct type token  must be defined.

    PROCEDURES:
    minimize_GB(string DIR, int in_r, int final_r, list needed_indices)     initialize the output token for the minimize_GB transition
";


proc mod_init()
{
    LIB "polylib.lib";
    LIB "teachstd.lib";
    LIB "general.lib"; // for sort

    system("--ticks-per-sec", 1000);
    newstruct("token", "list fieldnames, list data");
}

// argument order is ALWAYS:
// for inputs:  read  - in  - inout
// for outputs: inout - out - out_many

proc minimize_GB(string DIR, int in_r, int final_r, list needed_indices)
{
  token output;
  output.fieldnames[1] = "final_r";
  output.data[1] = final_r;

  // This output is just for debugging and analysing the algorithm:
  output.fieldnames[2] = "transition_names";
  output.data[2] = list("total_start_stop", "total_time",     "TRANSITION init TOTAL", "TRANSITION NF_of_spoly TOTAL", "TRANSITION NF_of_spoly_Qback TOTAL", "TRANSITION increment TOTAL", "TRANSITION remove_from_Q TOTAL", "TRANSITION minimize_GB TOTAL", "TRANSITION reduce_GB TOTAL", "reading input ideal in init", "saving initial ideal elements in init", "reading generators in NF_of_spoly (static)", "reading generators in NF_of_spoly", "applying NF in NF_of_spoly", "saving partially reduced poly in NF_of_spoly", "reading partially reduced poly in NF_of_spoly", "min serial runtime", "reading generators in reduce_GB (static)", "applying NF in reduce_GB", "clearing denominators in reduce_GB", "saving GB in files in reduce_GB", "PRODUCT CRITERION", "CHAIN CRITERION", "CANCELLED S-PAIRS", "CANCELLED ELEMENTS");
  output.fieldnames[3] = "runtimes_per_transition";
  output.data[3] = list(list(0,-2^31));
  for(int k=2; k<=size(output.data[2]); k++) {output.data[3][k]=list(0,0,0);}
  output.fieldnames[4] = "max_r_during_BB_algorithm";
  output.data[4] = in_r;
  output.fieldnames[5] = "needed_indices";
  output.data[5] = needed_indices;
  return(output);
}

// for debugging as error messages wont be pushed to gspc-monitor:
static proc debug(string DIR, def object, def filename, list #)
{
  if(size(#)==0) {#[1]="";}
  if(#[1]!="") {link l=   ":a "+DIR+string(filename); write(l, typeof(object)+": "+sprintf(#[1], object)); close(l);}
  else         {link l="ssi:w "+DIR+string(filename); write(l, object);                                    close(l);}
}
